/*
 * DigitalNewzealand.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DigitalNewzealand.PCL;
using DigitalNewzealand.PCL.Http.Request;
using DigitalNewzealand.PCL.Http.Response;
using DigitalNewzealand.PCL.Http.Client;
using DigitalNewzealand.PCL.Models;

namespace DigitalNewzealand.PCL.Controllers
{
    public partial class SearchRecordController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SearchRecordController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SearchRecordController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SearchRecordController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// The Search Records API call returns a result set in response to a search query. The v3 Search Records API request parameters and response format differs significantly from the deprecated v1 & v2 Search Records API call.
        /// </summary>
        /// <param name="text">Required parameter: TODO: type parameter description here</param>
        /// <param name="and">Optional parameter: Restricts search to records matching all facet values. Example: "&and[content_partner][]=Kete+Horowhenua&and[category][]=Images"</param>
        /// <param name="direction">Optional parameter:  the direction in which the results are sorted. Possible values: "desc", "asc".</param>
        /// <param name="facetPerPage">Optional parameter: the number of facets returned for every page. (Defaults to 10.)</param>
        /// <param name="facets">Optional parameter: a list of facet fields to include in the output. See the note on facets below for more information. Example: "&facets=year,category"</param>
        /// <param name="facetsPage">Optional parameter: the facet page to iterate over a set of facets. . (Defaults to 1.)</param>
        /// <param name="geoBbox">Optional parameter: a geographic bounding box scoping a search to a geographic region. Order of latitude-longitude coordinates is north, west, south, east. For example, &geo_bbox=-41,174,-42,175 searches the Wellington region.</param>
        /// <param name="or">Optional parameter: Restricts search to records matching any of the specified facet values. Example: "&or[category][]=Image&or[category][]=Videos"without </param>
        /// <param name="page">Optional parameter: the page when iterating over a set of records. (Defaults to 1.)</param>
        /// <param name="perPage">Optional parameter: the number of records the user wishes returned up to a maximum of 100. (Defaults to 20.)</param>
        /// <param name="sort">Optional parameter: the field upon which results are sorted. Defaults to relevance sorting. The sort field must be one of: "category", "content_partner", "date", "syndication_date".</param>
        /// <param name="without">Optional parameter: Restricts search to records that don't match any of the facet values. Example: "&without[category][]=Newspapers"</param>
        /// <return>Returns the CollectionSearchRecords response from the API call</return>
        public async Task<CollectionSearchRecords> SearchRecordAsync(
                string text,
                string and = null,
                string direction = null,
                int? facetPerPage = null,
                string facets = null,
                int? facetsPage = null,
                double? geoBbox = null,
                string or = null,
                int? page = null,
                int? perPage = null,
                string sort = null,
                string without = null)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/v3/records.json");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "text", text },
                { "and", and },
                { "direction", direction },
                { "facet_per_page", (null != facetPerPage) ? facetPerPage : 10 },
                { "facets", facets },
                { "facets_page", (null != facetsPage) ? facetsPage : 1 },
                { "geo_bbox", geoBbox },
                { "or", or },
                { "page", (null != page) ? page : 1 },
                { "per_page", (null != perPage) ? perPage : 20 },
                { "sort", sort },
                { "without", without },
                { "api_key", Configuration.ApiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CollectionSearchRecords>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

    }
} 